{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/authentication/login/login.component.ts","webpack:///src/app/authentication/login/login.component.html","webpack:///src/app/authentication/register/register.component.ts","webpack:///src/app/authentication/register/register.component.html","webpack:///src/app/classes/bid-event.ts","webpack:///src/app/classes/bid.ts","webpack:///src/app/classes/logged-in-user.ts","webpack:///src/app/classes/product.ts","webpack:///src/app/classes/profile.ts","webpack:///src/app/classes/share-event-node.ts","webpack:///src/app/classes/user.ts","webpack:///src/app/dashboard/admin/admin.component.ts","webpack:///src/app/dashboard/admin/admin.component.html","webpack:///src/app/dashboard/admin/user-update-by-admin/user-update-by-admin.component.ts","webpack:///src/app/dashboard/admin/user-update-by-admin/user-update-by-admin.component.html","webpack:///src/app/dashboard/events/event-create/event-create.component.ts","webpack:///src/app/dashboard/events/event-create/event-create.component.html","webpack:///src/app/dashboard/events/event-detail/event-detail.component.ts","webpack:///src/app/dashboard/events/event-detail/event-detail.component.html","webpack:///src/app/dashboard/events/event-list/event-list.component.ts","webpack:///src/app/dashboard/events/event-list/event-list.component.html","webpack:///src/app/dashboard/page-not-found/page-not-found.component.ts","webpack:///src/app/dashboard/profile/profile-image/profile-image.component.ts","webpack:///src/app/dashboard/profile/profile-image/profile-image.component.html","webpack:///src/app/dashboard/profile/profile-update/profile-update.component.ts","webpack:///src/app/dashboard/profile/profile-update/profile-update.component.html","webpack:///src/app/dashboard/profile/profile.component.ts","webpack:///src/app/dashboard/profile/profile.component.html","webpack:///src/app/services/admin-guard.service.ts","webpack:///src/app/services/auth-guard.service.ts","webpack:///src/app/services/auth-interceptor.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/bid.service.ts","webpack:///src/app/services/can-auction-guard.service.ts","webpack:///src/app/services/event.service.ts","webpack:///src/app/services/register.service.ts","webpack:///src/app/services/rest-api-server.service.ts","webpack:///src/app/services/share-event.service.ts","webpack:///src/app/services/share-user.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","redirectTo","pathMatch","component","canActivate","AppRoutingModule","forRoot","imports","RoutingComponent","AppComponent","router","route","authService","eventService","shareEvent","shareUser","event_list","getAllEvents","getLoggedInUser","subscribe","resp","logged_in_user","getUser","user","navigate","relativeTo","getEventList","console","log","body","results","setShareEventNode","error","alert","refreshEvents","selector","templateUrl","styles","tokenGetter","sessionStorage","getItem","AppModule","provide","useClass","multi","config","whitelistedDomains","blacklistedRoutes","declarations","providers","bootstrap","LoginComponent","loginStatus","LoginUser","username","password","login","clear","setItem","updateData","getUserFromHttp","logout","setUser","RegisterComponent","registerService","registerUser","status","onSubmit","BidEvent","product","date_added","start_date","deadline","base_price","current_date","Bid","bid_price","current_datetime","LoggedInUser","user_id","is_staff","expiration","Product","name","category","description","image","Profile","bio","contact_no","address","pincode","is_auctioneer","is_bidder","ShareEventNode","User","profile","first_name","last_name","email","confirm_password","AdminComponent","userService","showTable","updateTable","getUserByUsername","answer","confirm","deleteUserByAdmin","onSearch","UserUpdateByAdminComponent","updateUserByAdmin","updated_user","updateUser","EventCreateComponent","is_start_date_valid","is_deadline_valid","is_error","event","date","Date","getTime","now","parsed_start_date","parse_date","hours","Math","floor","parsed_deadline","validate_baseprice","validate_start_date","validate_deadline","addEventByAuctioneer","EventDetailComponent","bidService","event_id","can_bid","take_bid","user_bidprice","highest_bid","highest_bid_user","paramMap","params","parseInt","get","getShareEventNode","val","length","filter","x","deleteEventByAdmin","bid","place_bid","retrieveHighestBid","goBack","EventListComponent","filtered_set","filter_date","value","eventListObject","inputdate","filtering","PageNotFoundComponent","template","ProfileImageComponent","image_url","imagefile","want_to_update","target","files","file","size","filename","formData","FormData","append","updateProfileImage","ProfileUpdateComponent","updateProfileByUser","profileUpdate","ProfileComponent","show_update_form","request_type","Email","send","Host","Username","Password","To","From","Subject","Body","message","refreshProfile","updateProfile","AdminGuardService","providedIn","AuthGuardService","auth","AuthTokenInterceptor","request","next","token","undefined","clone","setHeaders","Authorization","handle","AuthService","http","jwtHelper","restapi","subject","url","path","isAuthenticated","setLoggedInUser","asObservable","object","isTokenExpired","ErrorEvent","detail","post","JSON","stringify","headers","observe","pipe","handleError","errors","tokenPayload","BidService","CanAuctionGuardService","can_auction","EventService","RegisterService","RestApiServerService","ShareEventService","shareEventNode","ShareUserService","UserService","put","patch","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule, Component } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RegisterComponent } from '@app/authentication/register/register.component';\nimport { LoginComponent } from '@app/authentication/login/login.component';\nimport { EventListComponent } from '@app/dashboard/events/event-list/event-list.component';\nimport { EventDetailComponent } from '@app/dashboard/events/event-detail/event-detail.component';\nimport { ProfileComponent } from '@app/dashboard/profile/profile.component';\nimport { AuthGuardService } from '@app/services/auth-guard.service';\nimport {PageNotFoundComponent} from '@app/dashboard/page-not-found/page-not-found.component';\nimport { AdminGuardService } from '@app/services/admin-guard.service';\nimport { AdminComponent } from '@app/dashboard/admin/admin.component';\nimport { UserUpdateByAdminComponent } from '@app/dashboard/admin/user-update-by-admin/user-update-by-admin.component';\nimport { EventCreateComponent } from '@app/dashboard/events/event-create/event-create.component';\nimport { CanAuctionGuardService } from '@app/services/can-auction-guard.service';\nimport { ProfileUpdateComponent } from '@app/dashboard/profile/profile-update/profile-update.component';\nimport { ProfileImageComponent } from '@app/dashboard/profile/profile-image/profile-image.component';\n\n\nconst routes: Routes = [\n  {'path':'',redirectTo:'/events',pathMatch:'full'},\n  {'path':'register',component:RegisterComponent},\n  {'path':'login',component:LoginComponent},\n  {'path':'admin',component:AdminComponent,canActivate:[AdminGuardService]},\n  {'path':'profile',component:ProfileComponent,canActivate:[AuthGuardService]},\n  {'path':'profile/image',component:ProfileImageComponent,canActivate:[AuthGuardService]},\n  {'path':'events',component:EventListComponent},\n  {'path':'create-event',component:EventCreateComponent,canActivate:[CanAuctionGuardService]},\n  {'path':'events/:id',component:EventDetailComponent},\n  {'path':'**',component:PageNotFoundComponent}]\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n//all components generated are stored in this array to prevent reimporting of all modules....\n//this array is imported in app.modules.ts\n\nexport const RoutingComponent=[RegisterComponent,\n  LoginComponent,\n  EventListComponent,\n  EventDetailComponent,\n  ProfileComponent,\n  PageNotFoundComponent,\n  AdminComponent,\n  UserUpdateByAdminComponent,\n  EventCreateComponent,\n  ProfileUpdateComponent,\n  ProfileImageComponent\n  ]\n","import { Component,OnInit } from '@angular/core';\nimport {AuthService} from '@app/services/auth.service';\nimport {Router} from '@angular/router';\nimport {ActivatedRoute} from '@angular/router';\nimport { LoggedInUser } from '@app/classes/logged-in-user';\nimport { BidEvent } from '@app/classes/bid-event';\nimport { EventService } from '@app/services/event.service';\nimport { ShareEventService } from '@app/services/share-event.service';\nimport { ShareEventNode } from '@app/classes/share-event-node';\nimport { ShareUserService } from '@app/services/share-user.service';\nimport { User } from '@app/classes/user';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styles: [``]\n})\nexport class AppComponent implements OnInit{\n  public logged_in_user:LoggedInUser;\n  private event_list:BidEvent[]=[];\n  public user:User;\n  constructor(public router:Router,public route:ActivatedRoute,public authService:AuthService,private eventService:EventService,\n    public shareEvent:ShareEventService,private shareUser:ShareUserService) {\n   }\n    \n  ngOnInit() {\n    \n//getting all event list from http\n    this.getAllEvents();\n\n    this.authService.getLoggedInUser().subscribe(resp=>{\n      this.logged_in_user=resp;\n    });\n   this.shareUser.getUser().subscribe(resp=>this.user=resp);\n   }\n\n   \n   goToProfile(){\n     this.router.navigate(['profile'])\n   }\n\n   ngDestroy(){\n     //sessionStorage.clear();\n   }\n   \n   goToEvents(){\n     this.router.navigate(['/events'],{relativeTo:this.route})\n   }\n\n   getAllEvents(){\n  //receiving all events and storing in behavior subject.\n    this.eventService.getEventList().subscribe(resp=>{\n      console.log(typeof resp.body.results);\n      console.log(\"received events from http\");\n     this.event_list=resp.body.results;\n     this.shareEvent.setShareEventNode({\"event_list\":this.event_list});},\n    error=>{console.log(error);\n    alert(error);\n     })\n    \n  }\n  //new events if any,  are stored in above behavior subject...user needs to click search for this\n  //event to take place\n  refreshEvents(){\n    console.log(\"refreshing.............\");\n    this.getAllEvents();\n\n  }\n  }\n \n  \n  \n\n","<header>\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  <a routerLink=\"/events\" class=\"navbar-brand mb-0  h1 active\">GRAB IT</a>\n   <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n <!--if user is currently not logged in-->\n  <div  class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <ul class=\"navbar-nav mr-auto\" *ngIf=\"!logged_in_user['loginStatus']\">\n      \n      <li class=\"nav-item\" >\n        <a routerLink=\"/login\" class=\"nav-link navbar-brand mb-0 h1 active\">Login</a>  \n    </li>\n      <li class=\"nav-item\" >\n        <a class=\"nav-link navbar-brand mb-0 h1 active\" routerLink=\"/register\">Register</a>\n      </li>\n    </ul>\n    <!--if user is logged in-->\n      <ul class=\"navbar-nav mr-auto\" *ngIf=\"logged_in_user['loginStatus']\">\n      <li class=\"nav-item active\" >\n        <span class=\"nav-link navbar-brand mb-0 h1 active\" >Welcome {{user.username}}</span>\n      </li>\n\n      <li class=\"nav-item active\">\n        <a routerLink=\"/profile\" class=\"nav-link navbar-brand mb-0 h1 active\">Profile</a>    \n        </li>\n        <li class=\"nav-item active\">\n          <a routerLink=\"/login\" class=\"nav-link navbar-brand mb-0 h1 active\">Logout</a>    \n      </li>\n\n      <li class=\"nav-item dropdown\" >\n        \n        <a class=\"nav-link navbar-brand mb-0 h1 active dropdown-toggle\" href=\"#\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Menu</a>\n        <div class=\"dropdown-menu bg-dark\" aria-labelledby=\"dropdown01\">\n          <a class=\"nav-link navbar-brand mb-0 h1 active\" routerLink=\"/events\">My Events</a>\n          <a class=\"nav-link navbar-brand mb-0 h1 active\" routerLink=\"/create-event\">Create Event</a>\n          <a class=\"nav-link navbar-brand mb-0 h1 active\" routerLink=\"/events\">Something else here</a>\n        </div>\n      </li>\n      \n      \n\n      </ul>\n    \n    \n   \n    \n    <form class=\"form-inline my-2 my-lg-0\">\n      <a routerLink=\"/admin\" ><span class=\"nav-link navbar-brand mb-0 h1 active\">Admin</span></a>\n      <span class=\"nav-link navbar-brand mb-0 h1 active\">{{logged_in_user[\"expiration\"]|date:'medium'}}</span>\n      <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"search to reload events\" aria-label=\"Search\">\n      <button class=\"btn btn-secondary my-2 my-sm-0\" (click)=\"refreshEvents()\">Search</button>\n    </form>\n  </div>\n</nav>\n</header>\n<main role=\"main\">\n  <div class=\"album py-5 bg-light\">\n    <div class=\"container\">  \n<router-outlet></router-outlet>\n</div>\n</div>\n</main>\n\n<footer class=\"text-muted\">\n  <div class=\"container\">\n    <p class=\"float-right\">\n      <a href=\"#\">Back to top</a>\n    </p>\n    <p>Album example is &copy; Bootstrap, but please download and customize it for yourself!</p>\n    <p>New to Bootstrap? <a href=\"https://getbootstrap.com/\">Visit the homepage</a> or read our <a href=\"../getting-started/introduction/\">getting started guide</a>.</p>\n  </div>\n</footer>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';    // add this\nimport { FormsModule } from '@angular/forms';    // add this\nimport { AppRoutingModule,RoutingComponent } from './app-routing.module';\nimport { AppComponent } from '@app/app.component';\nimport {JwtModule } from '@auth0/angular-jwt';\n\n/* adding rest-api-server-service here so that it is instantiated before any other service as it wil provide rest-api-server path*/\nimport {RestApiServerService} from '@app/services/rest-api-server.service';\n\n//need to be injected-->add in providers array\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AuthTokenInterceptor } from '@app/services/auth-interceptor';\n\nexport function tokenGetter() {\n  return sessionStorage.getItem(\"token\");\n}\n\n@NgModule({\n  declarations: [//all the modules the application has\n    AppComponent,\n    RoutingComponent,\n  \n    \n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule, HttpClientModule,\n    JwtModule.forRoot({\n      config: {//automatically append token in headers while making http request\n        tokenGetter: tokenGetter,\n        whitelistedDomains: [\"http://127.0.0.1:8000\"],\n        blacklistedRoutes: [\"http://example.com/examplebadroute/\"],\n      },\n    }),\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthTokenInterceptor,\n      multi: true\n    },\n    RestApiServerService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '@app/services/auth.service';\nimport {Router} from '@angular/router';\nimport {ActivatedRoute} from '@angular/router';\nimport { LoggedInUser } from '@app/classes/logged-in-user';\nimport {Observable} from 'rxjs';\nimport { $ } from 'protractor';\nimport { User } from '@app/classes/user';\nimport { ShareUserService } from '@app/services/share-user.service';\nimport { Profile } from '@app/classes/profile';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styles: [``]\n})\nexport class LoginComponent implements OnInit {\n\n  //to store username and password of user while login\n public LoginUser;\n //represents current logged in user-->null if no one\n public username:string;;\n //represents if anyone is logged in?\n  public loginStatus:boolean=false;\n  constructor(private authService: AuthService,public router:Router,public route:ActivatedRoute,\n    private shareUser:ShareUserService) {\n   }\n  \n  ngOnInit() {\n    this.authService.getLoggedInUser().subscribe(resp=>{\n      this.loginStatus=resp[\"loginStatus\"];\n      \n    });\n    \n    if(!this.loginStatus){\n    this.LoginUser = {\n      username: null,\n      password: null\n    };\n  \n  }\n  //getting user details from 'user' behavior subject-->returns null if no one------\n  this.shareUser.getUser().subscribe(resp=>this.username=resp[\"username\"]);\n  \n  }\n\n  //ngDestroy() to prevent memory leak due to Behaviour subject\n  \n  login() {\n    console.log(\"login()\")\n    this.authService.login({'username': this.LoginUser.username, 'password': this.LoginUser.password}).subscribe(\n    //clearing out session storage\n      resp=>{sessionStorage.clear();//extra protection\n        //storing access token received in session storage\n        sessionStorage.setItem('token',resp.body[\"access\"]);\n\n      this.authService.updateData();\n      //getting user profile after login---\n      this.getUserFromHttp();\n\n    },\n      error=>{\n      alert(error);\n     }\n    );\n  \n     //alert user about status\n    if(this.loginStatus){\n        alert(\"logged in successfully!!!!\");\n            }\n      \n      \n    }\n \n  \n \n  logout() {\n    this.authService.logout();\n    alert(\"logged out successfully!!!!!\");\n    //setting null value in 'user' behavior subject after logout\n    this.shareUser.setUser(new User(new Profile()))//update behavior subject containing user\n    this.router.navigate(['../events'],{relativeTo:this.route});\n  }\n \n\n\n  goToRegister(){\nthis.router.navigate(['../register'],{relativeTo:this.route})\n  }\n  goToProfile(){\n    this.router.navigate(['../profile'],{relativeTo:this.route})\n  }\n\n\n  getUserFromHttp(){\n    this.authService.getUser().subscribe(resp=>\n    {let user:User=resp.body;\n      //setting new user received in behavior subject 'user'\n      this.shareUser.setUser(user);\n      console.log(\"got profile\")},\n      error=>{\n      alert(\"unable to get profile\");\n      alert(error)});\n  }\n}\n","    <div class=\"container\">\n    <div class=\"container-fluid\">\n<!--if no user is cuurently logged in-->\n    <div *ngIf=\"!loginStatus\">\n\n      <h2>Log In</h2>\n      <hr>\n      <form #loginform=\"ngForm\" (ngSubmit)=\"login()\">\n        <div class=\"form-group\">\n        <label for=\"username_id\">Username:</label>\n        <input type=\"text\" name=\"login-username\" required  #login_uname=\"ngModel\" id=\"username_id\" class=\"form-control\" [(ngModel)]=\"LoginUser.username\">\n        <div *ngIf=\"login_uname.touched && login_uname.errors\" class=\"text-danger\">Username is required</div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password_id\">Password:</label>\n        <input type=\"password\" name=\"login-password\" required  #login_pass=\"ngModel\" id=\"password_id\" class=\"form-control\" [(ngModel)]=\"LoginUser.password\">\n        <div *ngIf=\"login_pass.touched && login_pass.errors\" class=\"text-danger\">Password is required</div>\n\n      </div>\n    \n        <button [disabled]=\"loginform.form.invalid\" type=\"submit\" class=\"btn btn-primary\">Log In</button>\n      </form>\n    \n     <!-----------------Register ->if no one is currently logged in---------------->\n     <hr>\n     \n     <button class=\"btn btn-primary\" (click)=\"goToRegister()\">Register</button>\n  \n    </div>\n    <!--if user is currently logged in -->\n    <div class=\"container-fluid\" *ngIf=\"loginStatus\" >\n      <div class=\"container\"><h2>You are logged in as {{username}} </h2><br />\n        <!--Token Expires: {{ authService.token_expires }}<br />-->\n        <button (click)=\"logout()\" class=\"btn btn-primary\">Log Out</button>\n        <button (click)=\"goToProfile()\" class=\"btn btn-primary\">View Profile</button>      \n      </div>\n    </div>\n    </div>\n  </div>","import { Component, OnInit } from '@angular/core';\nimport { User } from '@app/classes/user';\nimport { Profile } from '@app/classes/profile';\nimport { RegisterService } from '@app/services/register.service';\nimport {Router} from '@angular/router';\nimport {ActivatedRoute} from '@angular/router';\nimport { AuthService } from '@app/services/auth.service';\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styles: [``]\n})\nexport class RegisterComponent implements OnInit {\n//store registered user\n  user:User;\n\n  constructor(private authService:AuthService,private registerService:RegisterService,private router:Router,private route:ActivatedRoute) {\n   }\n\n  ngOnInit(): void {\n//initialising with default null values-->see constructor of user \n    this.user=new User(new Profile());\n                 \n    \n  }\n\nonSubmit(){\n  this.registerService.registerUser(this.user).subscribe(resp=>\n  {console.log(resp.status)\n    if(resp.status==201){\n      //if user is created\n      alert(\"you have registered successfully\");\n  this.router.navigate(['../login',],{relativeTo:this.route});}\n  },\n  error=>{console.log(error);\n   alert(error)});\n}\n}","<div class=\"container\">\n    <div class=\"container-fluid\">\n    \n    <h1>Register form</h1>\n    <hr>\n   \n    \n  <form #register=\"ngForm\" (ngSubmit)=\"onSubmit()\" novalidate>\n  \n    <!--form is valid ?{{register.form.valid}}//to check form is valid-->\n    \n  <div class=\"form-group\">\n    <label for=\"uname_id\">UserName</label>\n      <input type=\"text\" id=\"uname_id\" name=\"username\" class=\"form-control\" required  pattern=\"\\S{3,30}\" minlength=\"3\" maxlength=\"30\" [(ngModel)]=\"user.username\" #uname=\"ngModel\" [class.is-invalid]=\"uname.touched && uname.invalid\">\n    <div *ngIf=\"uname.errors && uname.touched\">\n      <small class=\"text-danger\" *ngIf=\"uname.errors.required\">Username is required</small>\n      <small class=\"text-danger\" *ngIf=\"uname.errors.maxlength\">Username should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"uname.errors.minlength\">Username should be of min 3 chars</small>\n      <small class=\"text-danger\" *ngIf=\"uname.errors.pattern && (!uname.errors.maxlength && !uname.errors.minlength) \">No whitespaces</small>\n\n    </div>\n    </div>\n  \n  <div class=\"form-group\">\n    <label for=\"email_id\">Email</label>\n    <input type=\"email\" name=\"email\" [(ngModel)]=\"user.email\"  required maxlength=\"50\" pattern=\"\\S{1,40}@gmail\\.com$\" id=\"email_id\" class=\"form-control\" #email=\"ngModel\" [class.is-invalid]=\"email.touched && email.invalid\">\n    <div *ngIf=\"email.errors && email.touched\">\n      <small class=\"text-danger\" *ngIf=\"email.errors.required\">Email is required</small>\n      <small class=\"text-danger\" *ngIf=\"email.errors.maxlength\">Email should be of max 50 chars</small>\n      <small class=\"text-danger\" *ngIf=\"email.errors.pattern && (!email.errors.maxlength) \">Email should end with '@gmail.com' and should not contain white spaces</small>\n\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"pass_id\">Password</label>\n    <input type=\"password\" name=\"password\" [(ngModel)]=\"user.password\"  pattern=\"\\S{8,30}\" required minlength=\"8\" maxlength=\"30\" id=\"pass_id\" class=\"form-control\" #pass=\"ngModel\" [class.is-invalid]=\"pass.touched && pass.invalid\">\n    <div *ngIf=\"pass.errors && pass.touched\">\n      <small class=\"text-danger\" *ngIf=\"pass.errors.minlength\">Password should be of min 8 chars</small>\n      <small class=\"text-danger\" *ngIf=\"pass.errors.required\">Password is required</small> \n      <small class=\"text-danger\" *ngIf=\"pass.errors.maxlength\">Password should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"pass.errors.pattern && (!pass.errors.maxlength && !pass.errors.minlength) \">No whitespaces</small>\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"conf_pass_id\">Confirm Password</label>\n    <input type=\"password\" name=\"conf_pass\" id=\"conf_pass_id\" #conf_pass=\"ngModel\" class=\"form-control\" [(ngModel)]=\"user.confirm_password\" required>\n    <div *ngIf=\"pass.touched && !pass.errors\">\n      <small class=\"text-danger\" *ngIf=\"pass.value!=conf_pass.value\">Both passwords should be same</small>\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"fname_id\">FirstName</label>\n    <input type=\"text\" name=\"first_name\" [(ngModel)]=\"user.first_name\"  minlength=\"3\" maxlength=\"30\" pattern=\"\\S{3,30}\"  required id=\"fname_id\" class=\"form-control\" #fname=\"ngModel\" [class.is-invalid]=\"fname.touched && fname.invalid\">\n    <div *ngIf=\"fname.errors && fname.touched\">\n      <small class=\"text-danger\" *ngIf=\"fname.errors.required\">FirstName is required</small>\n      <small class=\"text-danger\" *ngIf=\"fname.errors.minlength\">FirstName should be of min 3 chars</small>\n      <small class=\"text-danger\" *ngIf=\"fname.errors.maxlength\">FirstName should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"fname.errors.pattern && (!fname.errors.maxlength && !fname.errors.minlength) \"> No Whitespaces</small>\n\n    </div>\n  \n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"lname_id\">LastName</label>\n    <input type=\"text\" name=\"last_name\" [(ngModel)]=\"user.last_name\"  required minlength=\"3\" maxlength=\"30\" pattern=\"\\S{3,30}\" id=\"lname_id\" class=\"form-control\" #lname=\"ngModel\" [class.is-invalid]=\"lname.touched && lname.invalid\">\n    <div *ngIf=\"lname.errors && lname.touched\">\n      <small class=\"text-danger\" *ngIf=\"lname.errors.required\">LastName is required</small>\n      <small class=\"text-danger\" *ngIf=\"lname.errors.minlength\">LastName should be of min 3 chars</small>\n      <small class=\"text-danger\" *ngIf=\"lname.errors.maxlength\">LastName should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"lname.errors.pattern && (!lname.errors.maxlength && !lname.errors.minlength) \">No Whitespaces</small>\n\n    </div>\n  \n  </div>\n\n  <div ngModelGroup=\"profile\">\n  <div class=\"form-group\">\n    <label for=\"addr_id\">Address</label>\n    <input type=\"text\" class=\"form-control\" id=\"addr_id\" name=\"address\" [(ngModel)]=\"user.profile.address\" required  minlength=\"10\" maxlength=\"100\" #addr=\"ngModel\" [class.is-invalid]=\"addr.touched && addr.invalid\"> \n    <div *ngIf=\"addr.errors && addr.touched\">\n      <small class=\"text-danger\" *ngIf=\"addr.errors.required\">Address is required</small>\n      <small class=\"text-danger\" *ngIf=\"addr.errors.minlength\">Address should be of min 10 chars</small>\n      <small class=\"text-danger\" *ngIf=\"addr.errors.maxlength\">Address should be of max 100 chars</small>\n    </div>\n  \n  </div>\n  \n  <div class=\"form-group\">\n    <label for=\"pin_id\">Pincode</label>\n    <input type=\"text\" class=\"form-control\" id=\"pin_id\" pattern=\"^[1-9][0-9]{5}$\" name=\"pincode\" [(ngModel)]=\"user.profile.pincode\" required #pin=\"ngModel\" [class.is-invalid]=\"pin.touched && pin.invalid\">\n  <div *ngIf=\"pin.errors && pin.touched\">\n    <small class=\"text-danger\" *ngIf=\"pin.errors.required\">Pincode is required</small>\n    <small class=\"text-danger\" *ngIf=\"pin.errors.pattern\">Pincode must be of six digits starting with [1-9]</small>\n  \n  </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"contact_id\">Contact No</label>\n    <input type=\"text\" class=\"form-control\" id=\"contact_id\" name=\"contact_no\" [(ngModel)]=\"user.profile.contact_no\" required pattern=\"^[1-9][0-9]{9}$\" #phone=\"ngModel\" [class.is-invalid]=\"phone.touched && phone.invalid\"> \n    <div *ngIf=\"phone.errors && phone.touched\">\n      <small class=\"text-danger\" *ngIf=\"phone.errors.required\">Contact No is required</small>\n      <small class=\"text-danger\" *ngIf=\"phone.errors.pattern\">Contact No must be of ten digits starting with [1-9]</small>\n    \n    </div>\n  \n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"bio_id\">Bio</label>\n    <input type=\"text\" class=\"form-control\" id=\"bio_id\" name=\"bio\" [(ngModel)]=\"user.profile.bio\" maxlength=\"100\" #bio=\"ngModel\" [class.is-invalid]=\"bio.touched && bio.invalid\"> \n    <div *ngIf=\"bio.errors && bio.touched\">\n      <small class=\"text-danger\" *ngIf=\"bio.errors.maxlength\"> Bio should be of max 100 chars</small>\n    \n    </div>\n  \n  </div>\n\n  </div>\n  \n  <!--disable button if frm is invalid or password and conf. password value doesn't match-->\n  <button [disabled]=\"register.form.invalid || pass.value!=conf_pass.value\" class=\"btn btn-primary\" type=\"submit\" >Submit</button>\n  \n  \n  </form>\n  \n  </div>\n  \n</div>","import { Product } from './product';\n\nexport class BidEvent {\n            public product:Product;\n            public id:number;\n            public date_added:Date;\n            public start_date:Date;\n            public deadline:Date;\n            public base_price:number;\n            public current_date?:Date;\n    constructor(\n            product:Product,\n            id:number=null,\n            date_added:Date=null,\n            start_date:Date=null,\n            deadline:Date=null,\n            base_price:number=null,\n            current_date?:Date\n               ){\n                   this.product=product;\n                   this.id=id;\n                   this.date_added=date_added;\n                   this.start_date=start_date;\n                   this.deadline=deadline;\n                   this.base_price=base_price;\n                   this.current_date=current_date;\n               }\n               \n}\n","export class Bid {\n    bid_price:number;\n    current_datetime:Date;\n    constructor(bid_price:number=null,current_datetime:Date=null){\nthis.bid_price=bid_price;\nthis.current_datetime=current_datetime;\n    }\n}\n","//represents current logged in user-->expiration,user_id and is_staff are present in JSON web token payload\nexport class LoggedInUser {\n        public user_id:number=null;\n        public is_staff:boolean=false;\n        public expiration:Date=null;\n        public loginStatus:boolean=false;\n    \n    \n        \n    }\n      \n\n\n","export class Product {\n\n                public name:string;\n               public category:string;\n               public description:string;\n               public image:string;\n\n    constructor(name:string=null,\n                category:string=null,\n               description:string=null,\n               image:string=null){\n\n                this.category=category;\n                this.description=description;\n                this.image=image;\n                this.name=name;\n               }\n}\n","\nexport class Profile {\n    public bio:string;\n    public contact_no:string;\n    public address:string;\n    public pincode:string;\n    public image:string;\n    public is_auctioneer:boolean;\n    public is_bidder:boolean;\n    constructor(bio:string=null,\n        contact_no:string=null,\n        address:string=null,\n        pincode:string=null,\n        image:string=null,\n        is_auctioneer:boolean=false,\n        is_bidder:boolean=false)  \n    {\n        this.bio=bio;\n        this.contact_no=contact_no;\n        this.address=address;\n        this.pincode=pincode;\n        this.image=image;\n        this.is_auctioneer=is_auctioneer;\n        this.is_bidder=is_bidder;\n\n    }\n}\n","import { BidEvent } from '@app/classes/bid-event';\r\n\r\nexport class ShareEventNode{\r\n    public event_list:BidEvent[]=[];\r\n    \r\n}","import { Profile } from './profile';\n\nexport class User {\n                \n                public username:string;\n                public first_name:string;\n                public password:string;\n                public last_name:string;\n                public email:string;\n                public profile:Profile;\n                public confirm_password?:string;\n    constructor(\n                profile:Profile,\n                username:string=null,\n                first_name:string=null,\n                password:string=null,\n                last_name:string=null,\n                email:string=null,\n                confirm_password?:string\n                 ){\n\n                    this.username=username;\n                    this.first_name=first_name;\n                    this.password=password;\n                    this.last_name=last_name;\n                    this.email=email;\n                    this.profile=profile;\n                    this.confirm_password=confirm_password;\n                 }\n\n              \n}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '@app/services/auth.service';\nimport { User } from '@app/classes/user';\nimport { Profile } from '@app/classes/profile';\nimport { ShareUserService } from '@app/services/share-user.service';\nimport { UserService } from '@app/services/user.service';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styles:[`\n  `]\n})\nexport class AdminComponent implements OnInit {\n  //show user details table?\npublic showTable:boolean=false;\n//show user update table?\npublic updateTable=false;\npublic username:string=null;\npublic user:User;\npublic error:string;\npublic is_staff:boolean=false;\n  constructor(private userService:UserService,private shareUser:ShareUserService) {\n    this.user=new User(new Profile());\n   }\n\n  ngOnInit(): void {\n  \n  }\n\n  onSearch(){\n    this.updateTable=false;\n    //getting user from http request\n    this.userService.getUserByUsername(this.username).subscribe(resp=>{this.user=resp.body\n    this.showTable=true;//table is displayed on successfully receiving user\n    \n  },error=>{this.error=error;\n    alert(error);})\n  }\n\n\nonClickUpdateUser(){\n  alert(\"are you sure!!!\");\n  this.updateTable=true;//update table is shown\n  this.showTable=false;//show table is hidden\n\n}\n\n\ndeleteUser(){\n  let answer=confirm(\"are you sure want to delete the user\");//:))\n  if(answer){\n  this.userService.deleteUserByAdmin(this.username).subscribe(resp=>{\n    \n    if(resp.status==204){\n      alert(\"user deleted\");\n    }\n  },error=>{console.log(error);\n  alert(\"error:\"+error);})\n\n}}\n\n//admin cannot delete himself--hard coding\nisAdmin(){\n  if(this.user.username===\"sunilpie\")\n  return true;\n  else\n  return false;\n}\n}\n","<div class=\"container\">\n\n    <div class=\"container-fluid\">\n        <div class=\"col mb-4\">\n            <div class=\"card text-white bg-dark mb-3\">\n              <!--search user by admin with 'username' field-->\n              <div class=\"card-body\">\n                <h5 class=\"card-title\">Search User</h5>\n                <div  class=\"card-text\">\n                    <form #searchUser=\"ngForm\" (ngSubmit)=\"onSearch()\">\n                        <div class=\"form-group\">\n                            <label for=\"username_id\">Username:</label>\n                            <input type=\"text\"  name=\"user\" pattern=\"^\\S{3,30}$\"  #uname=\"ngModel\"  required [(ngModel)]=\"username\" id=\"username_id\" class=\"form-control\" >\n                            <div *ngIf=\"uname.touched && uname.errors\">\n                            <small class=\"text-danger\" *ngIf=\"uname.errors.required\">Username is required</small>\n                            <small class=\"text-danger\" *ngIf=\"uname.errors.maxlength\">Username should be of max 30 chars</small>\n                            <small class=\"text-danger\" *ngIf=\"uname.errors.minlength\">Username should be of min 3 chars</small>\n                            <small class=\"text-danger\" *ngIf=\"uname.errors.pattern && (!uname.errors.maxlength && !uname.errors.minlength) \">No whitespaces</small>\n                          </div>\n                          </div>\n                        <button type=\"submit\" [disabled]=\"uname.errors\" class=\"btn btn-primary\">Search</button>\n                    </form>\n                </div>\n                \n                \n                \n              </div>\n            </div>\n    \n          </div>\n        <!--show user profile   showed only when admin clicks on search user-->\n        <ng-container  *ngIf=\"showTable\">\n          \n          <div class=\"row row-cols-1 row-cols-md-2\">\n            <div class=\"col mb-4\">\n              <div class=\"card text-white bg-dark mb-3\">\n\n                <img src=\"{{user.profile.image}}\" class=\"card-img-top\" alt=\"My Profile\">\n                \n                <div class=\"card-body\">\n                  <h5 class=\"card-title\">{{user.first_name+\" \"+user.last_name|titlecase}}</h5>\n                  <p class=\"card-text\">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n                  <p class=\"card-text\">{{user.profile.bio| titlecase}}</p>    \n                  <p class=\"card-text\">\n                    \n                    <button class=\"btn btn-primary\" (click)=\"onClickUpdateUser()\">Update User</button>\n                  </p>\n                  <p class=\"card-text\">\n                    <ng-container *ngIf=\"!isAdmin()\">\n                    <button class=\"btn btn-primary\" (click)=\"deleteUser()\">Delete User</button>\n                  </ng-container>\n                  </p>\n              </div>\n\n              </div>\n            </div>\n          <!--Show user table-->\n          <div class=\"col mb-4\">\n            <div class=\"card text-white bg-dark mb-3\">\n            <table class=\"table table-hover table-dark \">\n              <thead>\n                <tr>\n                  <th scope=\"col\">User Details:</th>\n                \n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th scope=\"row\">Username</th>\n                  <td>{{user.username}}</td>\n                  \n                </tr>\n                \n                <tr>\n                  <th scope=\"row\">Email</th>\n                  <td>{{user.email}}</td>\n                  \n                </tr>\n                <tr>\n                    <th scope=\"row\">First Name</th>\n                    <td>{{user.first_name}}</td>\n                    \n                  </tr>\n                  <tr>\n                    <th scope=\"row\">Last Name</th>\n                    <td>{{user.last_name}}</td>\n                    \n                  </tr>\n\n                <tr>\n                  <th scope=\"row\">Contact No</th>\n                  <td>{{user.profile.contact_no}}</td>\n                  \n                </tr>\n                <tr>\n                  <th scope=\"row\">Address</th>\n                  <td>{{user.profile.address}}</td>\n                  \n                </tr>\n               \n                <tr>\n                  <th scope=\"row\">Auctioneer</th>\n                  <td>{{user.profile.is_auctioneer}}</td>\n                  \n                </tr>\n                <tr>\n                  <th scope=\"row\">Bidder</th>\n                  <td>{{user.profile.is_bidder}}</td>\n                  \n                </tr>\n          \n                <tr>\n                  <th scope=\"row\">Pincode</th>\n                  <td>{{user.profile.pincode}}</td>\n                  \n                </tr>\n               \n              </tbody>\n            </table>\n           \n            </div>\n            </div>\n          </div>\n          </ng-container>\n<!--User update form by admin when admin clicks update-->\n          <ng-container *ngIf=\"updateTable\">\n            <!--passing data from parent to child component-->\n          <app-user-update-by-admin [updated_user]=\"user\"></app-user-update-by-admin>\n        </ng-container>\n\n\n    </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { User } from '@app/classes/user';\nimport { Profile } from '@app/classes/profile';\nimport { AuthService } from '@app/services/auth.service';\nimport { UserService } from '@app/services/user.service';\n\n@Component({\n  selector: 'app-user-update-by-admin',\n  templateUrl: './user-update-by-admin.component.html',\n  styles: [``\n  ]\n})\nexport class UserUpdateByAdminComponent implements OnInit {\n  //received from parent component-->'admin component'-->see admin component html file\n@Input('updated_user') updated_user:User;\n  constructor(private userService:UserService) {\n   }\n\n  ngOnInit(): void {\n  }\n\n  updateUser(){\n    //code for updating user\n    this.userService.updateUserByAdmin(this.updated_user).subscribe(resp=>{\n      alert(\"user is updated\");\n    },error=>{\n      console.log(error);\n      alert(\"error:\"+error);\n    })\n   \n  }\n}\n","\r\n    <!--update user by admin excluding 'username' field as it is used in searching user-->\r\n<div class=\"container\">\r\n    <div class=\"container-fluid\">\r\n    \r\n    <h1>Update form</h1>\r\n    <hr>\r\n    \r\n  <form #updateForm=\"ngForm\" (ngSubmit)=\"updateUser()\" novalidate>\r\n  \r\n    \r\n  <div class=\"form-group\">\r\n    <label for=\"uname_id\">UserName</label>\r\n      <input type=\"text\" id=\"uname_id\" name=\"username\" class=\"form-control\" [disabled]=\"true\" [(ngModel)]=\"updated_user.username\" #uname=\"ngModel\">\r\n    <small class=\"text-success\">Username is read only</small>\r\n    </div>\r\n  \r\n  <div class=\"form-group\">\r\n    <label for=\"email_id\">Email</label>\r\n    <input type=\"email\" name=\"email\" [(ngModel)]=\"updated_user.email\"  required maxlength=\"50\" pattern=\"\\S{1,40}@gmail\\.com$\" id=\"email_id\" class=\"form-control\" #email=\"ngModel\" [class.is-invalid]=\"email.touched && email.invalid\">\r\n    <div *ngIf=\"email.errors && email.touched\">\r\n      <small class=\"text-danger\" *ngIf=\"email.errors.required\">Email is required</small>\r\n      <small class=\"text-danger\" *ngIf=\"email.errors.maxlength\">Email should be of max 50 chars</small>\r\n      <small class=\"text-danger\" *ngIf=\"email.errors.pattern && (!email.errors.maxlength && !email.errors.minlength) \">Email should end with '@gmail.com' and should not contain white spaces</small>\r\n\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"fname_id\">FirstName</label>\r\n    <input type=\"text\" name=\"first_name\" [(ngModel)]=\"updated_user.first_name\"  minlength=\"3\" maxlength=\"30\" pattern=\"\\S{3,30}\"  required id=\"fname_id\" class=\"form-control\" #fname=\"ngModel\" [class.is-invalid]=\"fname.touched && fname.invalid\">\r\n    <div *ngIf=\"fname.errors && fname.touched\">\r\n      <small class=\"text-danger\" *ngIf=\"fname.errors.required\">FirstName is required</small>\r\n      <small class=\"text-danger\" *ngIf=\"fname.errors.minlength\">FirstName should be of min 3 chars</small>\r\n      <small class=\"text-danger\" *ngIf=\"fname.errors.maxlength\">FirstName should be of max 30 chars</small>\r\n      <small class=\"text-danger\" *ngIf=\"fname.errors.pattern && (!fname.errors.maxlength && !fname.errors.minlength) \"> No Whitespaces</small>\r\n\r\n    </div>\r\n  \r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"lname_id\">LastName</label>\r\n    <input type=\"text\" name=\"last_name\" [(ngModel)]=\"updated_user.last_name\"  required minlength=\"3\" maxlength=\"30\" pattern=\"\\S{3,30}\" id=\"lname_id\" class=\"form-control\" #lname=\"ngModel\" [class.is-invalid]=\"lname.touched && lname.invalid\">\r\n    <div *ngIf=\"lname.errors && lname.touched\">\r\n      <small class=\"text-danger\" *ngIf=\"lname.errors.required\">LastName is required</small>\r\n      <small class=\"text-danger\" *ngIf=\"lname.errors.minlength\">LastName should be of min 3 chars</small>\r\n      <small class=\"text-danger\" *ngIf=\"lname.errors.maxlength\">LastName should be of max 30 chars</small>\r\n      <small class=\"text-danger\" *ngIf=\"lname.errors.pattern && (!lname.errors.maxlength && !lname.errors.minlength) \">No Whitespaces</small>\r\n\r\n    </div>\r\n  \r\n  </div>\r\n\r\n  <div ngModelGroup=\"profile\">\r\n  <div class=\"form-group\">\r\n    <label for=\"addr_id\">Address</label>\r\n    <input type=\"text\" class=\"form-control\" id=\"addr_id\" name=\"address\" [(ngModel)]=\"updated_user.profile.address\" required  minlength=\"10\" maxlength=\"100\" #addr=\"ngModel\" [class.is-invalid]=\"addr.touched && addr.invalid\"> \r\n    <div *ngIf=\"addr.errors && addr.touched\">\r\n      <small class=\"text-danger\" *ngIf=\"addr.errors.required\">Address is required</small>\r\n      <small class=\"text-danger\" *ngIf=\"addr.errors.minlength\">Address should be of min 10 chars</small>\r\n      <small class=\"text-danger\" *ngIf=\"addr.errors.maxlength\">Address should be of max 100 chars</small>\r\n    </div>\r\n  \r\n  </div>\r\n  \r\n  <div class=\"form-group\">\r\n    <label for=\"pin_id\">Pincode</label>\r\n    <input type=\"text\" class=\"form-control\" id=\"pin_id\" pattern=\"^[1-9][0-9]{5}$\" name=\"pincode\" [(ngModel)]=\"updated_user.profile.pincode\" required #pin=\"ngModel\" [class.is-invalid]=\"pin.touched && pin.invalid\">\r\n  <div *ngIf=\"pin.errors && pin.touched\">\r\n    <small class=\"text-danger\" *ngIf=\"pin.errors.required\">Pincode is required</small>\r\n    <small class=\"text-danger\" *ngIf=\"pin.errors.pattern\">Pincode must be of six digits starting with [1-9]</small>\r\n  \r\n  </div>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"contact_id\">Contact No</label>\r\n    <input type=\"text\" class=\"form-control\" id=\"contact_id\" name=\"contact_no\" [(ngModel)]=\"updated_user.profile.contact_no\" required pattern=\"^[1-9][0-9]{9}$\" #phone=\"ngModel\" [class.is-invalid]=\"phone.touched && phone.invalid\"> \r\n    <div *ngIf=\"phone.errors && phone.touched\">\r\n      <small class=\"text-danger\" *ngIf=\"phone.errors.required\">Contact No is required</small>\r\n      <small class=\"text-danger\" *ngIf=\"phone.errors.pattern\">Contact No must be of ten digits starting with [1-9]</small>\r\n    \r\n    </div>\r\n  \r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"bio_id\">Bio</label>\r\n    <input type=\"text\" class=\"form-control\" id=\"bio_id\" name=\"bio\" [(ngModel)]=\"updated_user.profile.bio\" maxlength=\"100\" #bio=\"ngModel\" [class.is-invalid]=\"bio.touched && bio.invalid\"> \r\n    <div *ngIf=\"bio.errors && bio.touched\">\r\n      <small class=\"text-danger\" *ngIf=\"bio.errors.maxlength\"> Bio should be of max 100 chars</small>\r\n    \r\n    </div>\r\n  \r\n  </div>\r\n<div class=\"form-group\">\r\n    Auctioneer\r\n  <div class=\"form-check\">\r\n    \r\n    <input type=\"radio\" class=\"form-check-input\" id=\"auction_true_id\" name=\"auctioneer\" #auctioneer=\"ngModel\" [value]=\"true\" required [(ngModel)]=\"updated_user.profile.is_auctioneer\"> \r\n    <label for=\"auction_true_id\" class=\"form-check-label\">Yes</label>  \r\n  </div>\r\n\r\n  <div class=\"form-check\">\r\n    \r\n    <input type=\"radio\" class=\"form-check-input\" id=\"auction_false_id\" name=\"auctioneer\" #auctioneer=\"ngModel\" [value]=\"false\" required [(ngModel)]=\"updated_user.profile.is_auctioneer\"> \r\n    <label for=\"auction_false_id\" class=\"form-check-label\">No</label>  \r\n  </div>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n    Bidder\r\n  <div class=\"form-check\">\r\n    \r\n    <input type=\"radio\" class=\"form-check-input\" id=\"bidder_true_id\" name=\"bidder\" #bidder=\"ngModel\" [value]=\"true\" required [(ngModel)]=\"updated_user.profile.is_bidder\"> \r\n    <label for=\"bidder_true_id\" class=\"form-check-label\">Yes</label>  \r\n  </div>\r\n\r\n  <div class=\"form-check\">\r\n    \r\n    <input type=\"radio\" class=\"form-check-input\" id=\"bidder_false_id\" name=\"bidder\" #bidder=\"ngModel\" [value]=\"false\" required [(ngModel)]=\"updated_user.profile.is_bidder\"> \r\n    <label for=\"bidder_false_id\" class=\"form-check-label\">No</label>  \r\n  </div>\r\n</div>\r\n\r\n  </div>\r\n  \r\n  \r\n  <button [disabled]=\"updateForm.form.invalid\" class=\"btn btn-primary\" type=\"submit\" >Submit</button>\r\n  \r\n  \r\n  </form>\r\n  \r\n  </div>\r\n  \r\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BidEvent } from '@app/classes/bid-event';\nimport { Product } from '@app/classes/product';\nimport { EventService } from '@app/services/event.service';\n\n@Component({\n  selector: 'app-event-create',\n  templateUrl: './event-create.component.html',\n  styles: [``]\n})\nexport class EventCreateComponent implements OnInit {\npublic event:BidEvent;\n//initially true so that errors are not shown\npublic is_start_date_valid:boolean=true;\npublic is_deadline_valid:boolean=true;\npublic is_error:boolean=false;\n  constructor(private eventService:EventService) { \n    //initialising new BidEvent object with default values \n    this.event=new BidEvent(new Product());\n  }\n\n  ngOnInit(): void {\n  }\n//parse date-->used for start_date and deadline of event object\n  parse_date(date:Date):number{\n    return new Date(date).getTime();//returns milliseconds since epoch\n  }\n\n  validate_start_date():boolean{\n    //true when start_date is 30 hours ahead of now \n  const current_date=Date.now();\n    const  parsed_start_date=this.parse_date(this.event.start_date)\n    const hours=Math.floor((parsed_start_date-current_date)/(1000*3600));\n    if(hours>=30){\n      return true;\n    }\n    else\n    return false;\n  }\n\n  //true when deadline is atleast 2 hours ahead\n  validate_deadline():boolean{\n    const parsed_deadline=this.parse_date(this.event.deadline);\n    const parsed_start_date=this.parse_date(this.event.start_date);\n    const hours:number=Math.floor((parsed_deadline-parsed_start_date)/(1000*3600));\n    if(hours>=2){\n      return true;\n    }\n    else\n    return false;\n  }\n\nvalidate_baseprice(){\nif(this.event.base_price>=1 && this.event.base_price<=10000000){\nthis.is_error=false;\nreturn true;\n    }\n    else\n    this.is_error=true;\n    return false;\n  }\n\nonSubmit(){\n  this.validate_baseprice();\n  //setting values to decide if errors are present in either....\n  this.is_start_date_valid=this.validate_start_date();//showing error if there is....\n  this.is_deadline_valid=this.validate_deadline();//showing error if there is ....\n  if(this.is_start_date_valid && (this.is_deadline_valid && !this.is_error)){\n\n  this.eventService.addEventByAuctioneer(this.event).subscribe(resp=>{\n    if(resp.status==201){\n   alert(\"event created successfully\");\n    }},error=>alert(error));\n\n}\n}\n}","\n<div class=\"container\">\n    <div class=\"container-fluid\">\n    \n    <h1>Create Event</h1>\n    <hr>\n    <!--Event create form   client side validations for start date and deadline -->\n  <form #eventCreate=\"ngForm\" (ngSubmit)=\"onSubmit()\">\n  \n    \n  <div class=\"form-group\">\n    <label for=\"startdate_id\">Start Date</label>\n      <input type=\"datetime-local\" id=\"startdate_id\" name=\"startdate\" class=\"form-control\" required  [(ngModel)]=\"event.start_date\" #startdate=\"ngModel\">\n      <div *ngIf=\"startdate.errors && startdate.touched\">\n        <small class=\"text-danger\" *ngIf=\"startdate.errors.required\">Start date is required</small>\n  \n      </div>\n      <!--if start date is valid-->\n      <small class=\"text-danger\" *ngIf=\"!is_start_date_valid\">Start date should be atleast 30 hours from now</small>\n    </div>\n\n    <div class=\"form-group\">\n        <label for=\"deadline_id\">Deadline</label>\n          <input type=\"datetime-local\" id=\"deadline_id\" name=\"deadline\" class=\"form-control\" required  [(ngModel)]=\"event.deadline\" #deadline=\"ngModel\">\n          <div *ngIf=\"deadline.errors && deadline.touched\">\n            <small class=\"text-danger\" *ngIf=\"deadline.errors.required\">Deadline is required</small>\n      \n          </div>\n          <!--if deadline is valid-->\n          <small class=\"text-danger\" *ngIf=\"!is_deadline_valid\">Deadlline should be atleast 2 hours ahead from start date</small>\n\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"baseprice_id\">Base Price</label>\n              <input type=\"number\" id=\"baseprice_id\" name=\"baseprice\" class=\"form-control\" required [(ngModel)]=\"event.base_price\" #baseprice=\"ngModel\">\n            <div *ngIf=\"baseprice.errors && baseprice.touched\">\n              <small class=\"text-danger\" *ngIf=\"baseprice.errors.required\">Base price is required</small>\n        \n            </div>\n            <div *ngIf=\"is_error\" class=\"text-danger\">Base price should be greater than 1 and less than or equal to 1 crore</div>\n            </div>\n        <div ngModelGroup=\"product\">\n            <div class=\"form-group\">\n                <label for=\"pname_id\">Product Name</label>\n                <input type=\"text\" class=\"form-control\" id=\"pname_id\" name=\"product_name\" [(ngModel)]=\"event.product.name\" required  minlength=\"3\" maxlength=\"50\" #pname=\"ngModel\" [class.is-invalid]=\"pname.touched && pname.invalid\"> \n                <div *ngIf=\"pname.errors && pname.touched\">\n                    <small class=\"text-danger\" *ngIf=\"pname.errors.required\">Product name is required</small>\n                    <small class=\"text-danger\" *ngIf=\"pname.errors.minlength\">Product name should be of min 3 chars</small>\n                    <small class=\"text-danger\" *ngIf=\"pname.errors.maxlength\">Product name should be of max 50 chars</small>\n                </div>\n                \n            </div>\n            <div class=\"form-group\">\n                <label for=\"category_id\">Category</label>\n                <input type=\"text\" class=\"form-control\" id=\"category_id\" name=\"category\" [(ngModel)]=\"event.product.category\" required  minlength=\"3\" maxlength=\"50\" #category=\"ngModel\" [class.is-invalid]=\"category.touched && category.invalid\"> \n                <div *ngIf=\"category.errors && category.touched\">\n                    <small class=\"text-danger\" *ngIf=\"category.errors.required\">Category is required</small>\n                    <small class=\"text-danger\" *ngIf=\"category.errors.minlength\">Category should be of min 3 chars</small>\n                    <small class=\"text-danger\" *ngIf=\"category.errors.maxlength\">Category should be of max 50 chars</small>\n                </div>\n                \n            </div>\n            <div class=\"form-group\">\n                <label for=\"desc_id\">Description</label>\n                <input type=\"text\" class=\"form-control\" id=\"desc_id\" name=\"desc\" [(ngModel)]=\"event.product.description\" required  minlength=\"3\" maxlength=\"100\" #desc=\"ngModel\" [class.is-invalid]=\"desc.touched && desc.invalid\"> \n                <div *ngIf=\"desc.errors && desc.touched\">\n                    <small class=\"text-danger\" *ngIf=\"desc.errors.required\">Description is required</small>\n                    <small class=\"text-danger\" *ngIf=\"desc.errors.minlength\">Description should be of min 3 chars</small>\n                    <small class=\"text-danger\" *ngIf=\"desc.errors.maxlength\">Description should be of max 100 chars</small>\n                </div>\n                \n            </div>\n\n\n        </div>\n\n        <button type=\"submit\" [disabled]=\"eventCreate.form.invalid\" class=\"btn btn-primary\">Submit</button>\n    </form>\n\n\n\n    </div>\n    </div>","import { Component, OnInit } from '@angular/core';\nimport { Router,ActivatedRoute ,ParamMap} from '@angular/router';\nimport { BidEvent } from '@app/classes/bid-event';\nimport { Product } from '@app/classes/product';\nimport { AuthService } from '@app/services/auth.service';\nimport { ShareEventService } from '@app/services/share-event.service';\nimport { ShareUserService } from '@app/services/share-user.service';\nimport { BidService } from '@app/services/bid.service';\nimport { Bid } from '@app/classes/bid';\nimport { EventService } from '@app/services/event.service';\nimport { User } from '@app/classes/user';\nimport { Profile } from '@app/classes/profile';\n\n@Component({\n  selector: 'app-event-detail',\n  templateUrl: './event-detail.component.html',\n  styles: [``]\n})\nexport class EventDetailComponent implements OnInit {\n  //to obtain event id for which details need to be shown\n  event_id:number=null;\n  event:BidEvent=null;\n  is_staff:boolean=false;\n  can_bid:boolean=false;//if current datetime is between start date and end date of event\n  is_bidder:boolean=false;\n  take_bid:boolean=false;//only if user say yes:))\n  user_bidprice:number=null;\n  is_error:boolean=false;\n  highest_bid:number=null;\n  highest_bid_user:User=new User(new Profile());\n  constructor(private router:Router,private route:ActivatedRoute,private shareEvent:ShareEventService,\n    private authService:AuthService,private shareUser:ShareUserService,private bidService:BidService,private eventService:EventService ) {\n  console.log(\"event detail:\"+this.event);\n   }\n  \n  ngOnInit(): void {\n    //initialising with default values\n    this.event=new BidEvent(new Product());\n//obtaining event_id from route parameters\n    this.route.paramMap.subscribe((params:ParamMap)=>{\n      let id=parseInt(params.get('id'));\n      this.event_id=id;\n    });\n    //obtaining event with given event_id from service providing 'events array'\n    this.shareEvent.getShareEventNode().subscribe(val=>{\n      if(val.event_list.length!=0){\n        this.event=val.event_list.filter(x=>x.id==this.event_id)[0];\n\n        if(this.event!=null){//callback that is executed only after receiving event details\n          this.authService.getLoggedInUser().subscribe(resp=>this.is_staff=resp[\"is_staff\"])\n\n          const current_datetime=Date.now()\n          const parsed_start_date=this.parse_date(this.event.start_date);//converts in milliseconds since epoch\n          const parsed_deadline=this.parse_date(this.event.deadline);\n\n       if(current_datetime>=parsed_start_date && current_datetime<parsed_deadline){\n\n       this.can_bid=true;\n       //getting 'is_bidder' property of currently logged in user\n      this.shareUser.getUser().subscribe(val=>this.is_bidder=val.profile[\"is_bidder\"]    )\n      //will tell if user is admin\n      console.log(this.is_bidder+\" \"+this.can_bid)\n       }\n        }\n      \n      }\n      \n    });\n\n  }\n  //delete event option for admin\n  deleteEvent(){\n    let answer=confirm(\"are you sure want to delete?\");\n\n    if(answer){\n      console.log(\"in event component\"+this.event_id)\n\n    this.eventService.deleteEventByAdmin(this.event_id).subscribe(resp=>\n      alert(\"successfully deleted\"),error=>alert(error));\n    }\n  }\n\n  onClick(){\n    this.take_bid=true;\n  }\n\n  validate_bid(){\nif(this.user_bidprice>=this.event.base_price && this.user_bidprice<=100000000){\n\nconst current_datetime=new Date();\n//storing time at which bid was placed -->for validation on server side\nconsole.log(current_datetime)\n\nlet bid=new Bid(this.user_bidprice,current_datetime);\n//send bid\nthis.bidService.place_bid(bid,this.event.id).subscribe(resp=>\n  {alert(\"bid successfully placed\")},error=>\n  {alert(error);});\n\nthis.take_bid=false;\n  }\n\n    else\n    this.is_error=true;\n    \n  }\n\n  parse_date(date:Date):number{\n    return new Date(date).getTime();//returns milliseconds since epoch\n  }\n\n  goBack(){\n    this.router.navigate(['../'],{relativeTo:this.route});\n  }\n  \n  \n  getHighestBid(){\n    this.bidService.retrieveHighestBid(this.event_id).subscribe(resp=>\n      {this.highest_bid=resp.body[\"highest_bid\"];\n    this.highest_bid_user=resp.body[\"user\"];\n    },error=>alert(error))\n  }\n\n}\n","\n\n<div class=\"container\">\n  <div class=\"container-fluid\">\n\n<table class=\"table table-hover table-dark\">\n    <thead>\n      <tr>\n        <th scope=\"col\">Event Details:</th>\n       <!-- <th scope=\"col\">First</th>\n        <th scope=\"col\">Last</th>\n        <th scope=\"col\">Handle</th>-->\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">Id</th>\n        <td>{{event.id}}</td>\n        \n      </tr>\n\n      <tr>\n        <th scope=\"row\">Date Added</th>\n        <td>{{event.date_added |date :'medium'}}</td>\n        \n      </tr>\n      <tr>\n        <th scope=\"row\">Start Date</th>\n        <td>{{event.start_date|date :'medium'}}</td>\n        \n      </tr>\n      <tr>\n        <th scope=\"row\">Deadline</th>\n        <td>{{event.deadline|date:'medium'}}</td>\n        \n      </tr>\n      <tr>\n        <th scope=\"row\">Name</th>\n        <td>{{event.product.name}}</td>\n        \n      </tr>\n      <tr>\n        <th scope=\"row\">Category</th>\n        <td>{{event.product.category}}</td>\n        \n      </tr>\n      <tr>\n        <th scope=\"row\">Description</th>\n        <td>{{event.product.description}}</td>\n        \n      </tr>\n      <tr>\n        <th scope=\"row\">Base Price</th>\n        <td>{{event.base_price}}</td>\n        \n      </tr>\n    </tbody>\n  </table>\n<ng-container *ngIf=\"can_bid && is_bidder\">\n  <div class=\"col mb-4\">\n    <div class=\"card text-white bg-dark mb-3\">\n      <div class=\"card-body\">\n        <p class=\"card-text\">Want to place bid?</p>\n        <p class=\"card-text\"><button class=\"btn btn-primary\" (click)=\"onClick()\">Yes</button></p>\n        <p class=\"card-text\">\n          <ng-container *ngIf=\"take_bid\">\n            \n              <form #register_bid=\"ngForm\" (ngSubmit)=\"validate_bid()\">\n                <div class=\"form-group\">\n              <input type=\"number\" name=\"bidprice\" #bidprice=\"ngModel\" class=\"form-control\"  required [(ngModel)]=\"user_bidprice\">\n            <div *ngIf=\"bidprice.errors && bidprice.touched\">\n              <small *ngIf=\"bidprice.errors.required\">Bid price is required</small>\n            </div>    \n            <div *ngIf=\"is_error\">Minimum bid price is {{event.base_price}}. Max bid price is 10 crore</div>\n            </div>\n            <button [disabled]=\"register_bid.form.invalid\" class=\"btn btn-primary\">Place bid</button>\n            </form>\n            \n          </ng-container>\n        </p>\n        <p class=\"card-text\"><button class=\"btn btn-primary\" (click)=\"getHighestBid()\">Get Highest Bid</button></p>\n        <p class=\"card-text\">Current highest bid is&nbsp; {{highest_bid}}</p>\n        <p class=\"card-text\">\n        <ng-container *ngIf=\"is_staff\">\n         Highest bid User&nbsp;:&nbsp;{{highest_bid_user.username+\"  \"+highest_bid_user.profile.contact_no}}\n        </ng-container>\n      </p>\n      </div>\n    </div>\n\n  </div>\n</ng-container>\n<ng-container *ngIf=\"is_staff\">\n  <button class=\"btn btn-primary\" (click)=\"deleteEvent()\">Delete Event</button>\n</ng-container>\n<button class=\"btn btn-primary\" (click)=\"goBack()\">Back</button>\n\n</div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport {EventService} from '@app/services/event.service';\nimport { BidEvent } from '@app/classes/bid-event';\nimport { ShareEventService } from '@app/services/share-event.service';\nimport { ShareEventNode } from '@app/classes/share-event-node';\n@Component({\n  selector: 'app-event-list',\n  templateUrl: './event-list.component.html',\n  styles: [`\n  `]\n})\nexport class EventListComponent implements OnInit {\n\n public eventListObject:ShareEventNode;\n public filtered_set:BidEvent[]=[]\n public filter_date:Date=null;\n  constructor(private eventService:EventService,public shareEvent:ShareEventService) { \n  \n  }\n\n  ngOnInit(): void {\n    //obtaining all events from this service--->returns behavior subject containing events array\n    this.shareEvent.getShareEventNode().subscribe(value=>{this.eventListObject=value;\n    this.filtered_set=this.eventListObject.event_list;\n    });\n    console.log(\"displaying new list\");\n  }\n\n  filtering(inputdate:Date){\n    this.filtered_set=this.eventListObject.event_list.filter(x=>x.start_date>=inputdate);\n\n  }\n}\n","    <div class=\"container\">\n    <div class=\"container-fluid\">\n    \n      <div class=\"card text-white bg-dark mb-3\">\n        <div class=\"card-body\">\n          <input type=\"datetime-local\" name=\"inputdate\" placeholder=\"filter events by date\" required #inputdate=\"ngModel\" [(ngModel)]=\"filter_date\">\n          <p class=\"card-text\"><button [disabled]=\"inputdate.errors\" class=\"btn btn-primary\" (click)=\"filtering(inputdate.value)\">Filter</button></p>\n        </div>\n      </div>\n\n    <div class=\"row row-cols-1 row-cols-md-3\">\n<ng-container *ngIf=\"filtered_set.length==0\">\n\n  <blockquote class=\"blockquote\">\n    <p class=\"mb-0\">There are no events currently</p>\n  </blockquote>\n\n</ng-container>\n      <ng-container  *ngFor=\"let event of filtered_set\">\n\n       <div class=\"col mb-4\">\n  \n        <div class=\"card text-white bg-dark mb-3\">\n          <div class=\"card-body\">\n            <p class=\"card-text\">{{filtered_set.length}} events received</p>\n          </div>\n        </div>\n\n       </div>\n\n        <div class=\"col mb-4\">\n          <div class=\"card text-white bg-dark mb-3\">\n            <div class=\"card-header\"><h5>Event Id&nbsp;:&nbsp;{{event.id}}</h5></div>\n            <a routerLink=\"/events/{{event.id}}\" ><img src=\"{{event.product.image}}\" class=\"card-img-top\" alt=\"{{event.product.category}}\"></a>\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">{{event.product.name  | titlecase}}</h5>\n              <p class=\"card-text\">Start Date&nbsp;:&nbsp;{{event.start_date|date:'medium'}}</p>\n              <p class=\"card-text\">Base Price&nbsp;:&nbsp;{{event.base_price}}</p>\n            </div>\n            <div class=\"card-footer\">\n              <small class=\"text-muted\">{{event.product.description | titlecase}}</small>\n            </div>\n          </div>\n        </div>\n\n    </ng-container>\n    </div>\n    \n  \n    </div>\n    </div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  template: `\n  <h1>HTTP 404</h1>\n    <p>\n      page-not-found \n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class PageNotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '@app/services/user.service';\nimport { ShareUserService } from '@app/services/share-user.service';\n\n@Component({\n  selector: 'app-profile-image',\n  templateUrl: './profile-image.component.html',\n  styles: [``]\n})\nexport class ProfileImageComponent implements OnInit {\npublic image_url:string=null;\npublic is_error:boolean=false;\npublic imagefile:File=null;\npublic want_to_update:boolean=false;\n\n  constructor(private shareUser:ShareUserService,private userService:UserService) { }\n\n  ngOnInit(): void {\nthis.shareUser.getUser().subscribe(resp=>this.image_url=resp.profile[\"image\"]);\n  }\n\n  onFileSelect(event) {\n    if (event.target.files.length > 0) {\n\n      const file:File= event.target.files[0];\n      if(file.size<=1000000){//1 mb\n        console.log(file.size)\n      this.imagefile=file;\n      this.is_error=false;\n      }\n      else\n      this.is_error=true;\n    }\n      else\n      this.is_error=true;\n    \n  }\n  \n\n  onSubmit(){\n  \n    if(!this.is_error && this.imagefile!=null){\n      let filename=this.imagefile.name;\n      console.log(filename)\n\n      let formData:FormData=new FormData();\n      formData.append('file',this.imagefile);\n  this.userService.updateProfileImage(formData,filename).subscribe(resp=>\n    alert(\"profile image successfully updated...refresh profile\"),\n    error=>{\n      alert(error);}\n    );}\n    this.want_to_update=false;\n\n  }\n\n    updateProfileImage(){\n      this.want_to_update=true;\n    }\n  \n\n\n\n}\n","<div class=\"row row-cols-1 row-cols-md-2\">\n  <div class=\"col mb-4\">\n    <div class=\"card text-white bg-dark mb-3\">\n      <img src=\"{{image_url}}\" class=\"card-img-top\" alt=\"My Profile\">\n        \n    <div class=\"card-body\">\n    <p class=\"card-text\"><button class=\"btn btn-primary\" (click)=\"updateProfileImage()\">Edit Photo</button></p>\n    <div class=\"card-text\" *ngIf=\"want_to_update\">\n     <form  (ngSubmit)=\"onSubmit()\" class=\"form-group\">\n    <div class=\"custom-file\">\n    <input type=\"file\" name=\"image\" accept=\".jpg,.jpeg\"  required (change)=\"onFileSelect($event)\">\n    <div *ngIf=\"is_error\">Image size should be less than 1 Mb</div>\n  </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n   </form> \n\n   </div>\n\n    </div>\n  </div>\n  </div>\n  </div>","import { Component, OnInit, Input } from '@angular/core';\nimport { User } from '@app/classes/user';\nimport { UserService } from '@app/services/user.service';\n\n@Component({\n  selector: 'app-profile-update',\n  templateUrl: './profile-update.component.html',\n  styles: [``]\n})\nexport class ProfileUpdateComponent implements OnInit {\n  @Input('user') updated_user:User;\n  constructor(private userService:UserService) { }\n\n  ngOnInit(): void {\n  }\n\n  profileUpdate(){\n\n    this.userService.updateProfileByUser(this.updated_user).subscribe(resp=>\n  alert(\"profile updated successfully\"),\n  error=>alert(error));\n  \n}\n}\n","\n    \n    <h1>Update Profile</h1>\n    <hr>\n   \n    \n  <form #updateProfile=\"ngForm\" (ngSubmit)=\"profileUpdate()\" novalidate>\n  \n    <!--form is valid ?{{register.form.valid}}//to check form is valid-->\n    \n  <div class=\"form-group\">\n    <label for=\"uname_id\">UserName</label>\n      <input type=\"text\" id=\"uname_id\" name=\"username\" class=\"form-control\" required  pattern=\"\\S{3,30}\" minlength=\"3\" maxlength=\"30\" [(ngModel)]=\"updated_user.username\" #uname=\"ngModel\" [class.is-invalid]=\"uname.touched && uname.invalid\">\n    <div *ngIf=\"uname.errors && uname.touched\">\n      <small class=\"text-danger\" *ngIf=\"uname.errors.required\">Username is required</small>\n      <small class=\"text-danger\" *ngIf=\"uname.errors.maxlength\">Username should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"uname.errors.minlength\">Username should be of min 3 chars</small>\n      <small class=\"text-danger\" *ngIf=\"uname.errors.pattern && (!uname.errors.maxlength && !uname.errors.minlength) \">No whitespaces</small>\n\n    </div>\n    </div>\n  \n  <div class=\"form-group\">\n    <label for=\"email_id\">Email</label>\n    <input type=\"email\" name=\"email\" [(ngModel)]=\"updated_user.email\"  required maxlength=\"50\" pattern=\"\\S{1,40}@gmail\\.com$\" id=\"email_id\" class=\"form-control\" #email=\"ngModel\" [class.is-invalid]=\"email.touched && email.invalid\">\n    <div *ngIf=\"email.errors && email.touched\">\n      <small class=\"text-danger\" *ngIf=\"email.errors.required\">Email is required</small>\n      <small class=\"text-danger\" *ngIf=\"email.errors.maxlength\">Email should be of max 50 chars</small>\n      <small class=\"text-danger\" *ngIf=\"email.errors.pattern && (!email.errors.maxlength) \">Email should end with '@gmail.com' and should not contain white spaces</small>\n\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"fname_id\">FirstName</label>\n    <input type=\"text\" name=\"first_name\" [(ngModel)]=\"updated_user.first_name\"  minlength=\"3\" maxlength=\"30\" pattern=\"\\S{3,30}\"  required id=\"fname_id\" class=\"form-control\" #fname=\"ngModel\" [class.is-invalid]=\"fname.touched && fname.invalid\">\n    <div *ngIf=\"fname.errors && fname.touched\">\n      <small class=\"text-danger\" *ngIf=\"fname.errors.required\">FirstName is required</small>\n      <small class=\"text-danger\" *ngIf=\"fname.errors.minlength\">FirstName should be of min 3 chars</small>\n      <small class=\"text-danger\" *ngIf=\"fname.errors.maxlength\">FirstName should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"fname.errors.pattern && (!fname.errors.maxlength && !fname.errors.minlength) \"> No Whitespaces</small>\n\n    </div>\n  \n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"lname_id\">LastName</label>\n    <input type=\"text\" name=\"last_name\" [(ngModel)]=\"updated_user.last_name\"  required minlength=\"3\" maxlength=\"30\" pattern=\"\\S{3,30}\" id=\"lname_id\" class=\"form-control\" #lname=\"ngModel\" [class.is-invalid]=\"lname.touched && lname.invalid\">\n    <div *ngIf=\"lname.errors && lname.touched\">\n      <small class=\"text-danger\" *ngIf=\"lname.errors.required\">LastName is required</small>\n      <small class=\"text-danger\" *ngIf=\"lname.errors.minlength\">LastName should be of min 3 chars</small>\n      <small class=\"text-danger\" *ngIf=\"lname.errors.maxlength\">LastName should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"lname.errors.pattern && (!lname.errors.maxlength && !lname.errors.minlength) \">No Whitespaces</small>\n\n    </div>\n  \n  </div>\n\n  <div ngModelGroup=\"profile\">\n  <div class=\"form-group\">\n    <label for=\"addr_id\">Address</label>\n    <input type=\"text\" class=\"form-control\" id=\"addr_id\" name=\"address\" [(ngModel)]=\"updated_user.profile.address\" required  minlength=\"10\" maxlength=\"100\" #addr=\"ngModel\" [class.is-invalid]=\"addr.touched && addr.invalid\"> \n    <div *ngIf=\"addr.errors && addr.touched\">\n      <small class=\"text-danger\" *ngIf=\"addr.errors.required\">Address is required</small>\n      <small class=\"text-danger\" *ngIf=\"addr.errors.minlength\">Address should be of min 10 chars</small>\n      <small class=\"text-danger\" *ngIf=\"addr.errors.maxlength\">Address should be of max 100 chars</small>\n    </div>\n  \n  </div>\n  \n  <div class=\"form-group\">\n    <label for=\"pin_id\">Pincode</label>\n    <input type=\"text\" class=\"form-control\" id=\"pin_id\" pattern=\"^[1-9][0-9]{5}$\" name=\"pincode\" [(ngModel)]=\"updated_user.profile.pincode\" required #pin=\"ngModel\" [class.is-invalid]=\"pin.touched && pin.invalid\">\n  <div *ngIf=\"pin.errors && pin.touched\">\n    <small class=\"text-danger\" *ngIf=\"pin.errors.required\">Pincode is required</small>\n    <small class=\"text-danger\" *ngIf=\"pin.errors.pattern\">Pincode must be of six digits starting with [1-9]</small>\n  \n  </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"contact_id\">Contact No</label>\n    <input type=\"text\" class=\"form-control\" id=\"contact_id\" name=\"contact_no\" [(ngModel)]=\"updated_user.profile.contact_no\" required pattern=\"^[1-9][0-9]{9}$\" #phone=\"ngModel\" [class.is-invalid]=\"phone.touched && phone.invalid\"> \n    <div *ngIf=\"phone.errors && phone.touched\">\n      <small class=\"text-danger\" *ngIf=\"phone.errors.required\">Contact No is required</small>\n      <small class=\"text-danger\" *ngIf=\"phone.errors.pattern\">Contact No must be of ten digits starting with [1-9]</small>\n    \n    </div>\n  \n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"bio_id\">Bio</label>\n    <input type=\"text\" class=\"form-control\" id=\"bio_id\" name=\"bio\" [(ngModel)]=\"updated_user.profile.bio\" maxlength=\"100\" #bio=\"ngModel\" [class.is-invalid]=\"bio.touched && bio.invalid\"> \n    <div *ngIf=\"bio.errors && bio.touched\">\n      <small class=\"text-danger\" *ngIf=\"bio.errors.maxlength\"> Bio should be of max 100 chars</small>\n    \n    </div>\n  \n  </div>\n\n  </div>\n  \n  <!--disable button if frm is invalid or password and conf. password value doesn't match-->\n  <button [disabled]=\"updateProfile.form.invalid\" class=\"btn btn-primary\" type=\"submit\" >Submit</button>\n  \n  \n  </form>\n  \n  ","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '@app/services/auth.service';\nimport {Router,ActivatedRoute} from'@angular/router';\nimport { User } from '@app/classes/user';\nimport { Profile } from '@app/classes/profile';\nimport { ShareUserService } from '@app/services/share-user.service';\ndeclare let Email: any;\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styles: [`\n  `]\n})\nexport class ProfileComponent implements OnInit {\n  //to store user details\n  user:User\n  public show_update_form:boolean=false;\n\n  constructor(private authService:AuthService,private router:Router,private route:ActivatedRoute,private shareUser:ShareUserService) { }\n\n  ngOnInit(): void {\n    //getting complete user from this service-->returns behavior subject 'user'\n      this.shareUser.getUser().subscribe(resp=>{\n        this.user=resp;\n      console.log(this.user.profile.image)});\n      \n  }\n\n\n\n  updateProfile(){\n\n    this.show_update_form=true;\n  }\n\n\n//take request from user to be abidder and auctioneer\n  user_request(username,request_type){\n    let value:string;\n    if(request_type==='bid'){\n      alert(\"bid request processing\");\n      value=\"bidder\";\n    }\n    else\n    if(request_type==='auction'){\n      alert(\"auction request processing\");\n      value=\"auctioneer\";\n    }\n//sending email\n    Email.send({\n      Host : \"smtp.elasticemail.com\",\n      Username : \"pie99954@gmail.com\",\n      Password : \"7D2959372FBB172F93194EECAEB0ABFF622A\",\n      To : 'sunilpie1997@gmail.com',\n      From : \"pie99954@gmail.com\",\n      Subject : \"Bid_app\",\n      Body : username+\" wants to be a \"+value\n  }).then(\n\n    message => {alert(message);\n    console.log(\"email sent\")}\n  );\n  }\n//to again fetch profile from http sot that user doesn't need to reload\n//new user details if present will be stored in behavior subject so that all components receive same details.\n  refreshProfile(){\n    this.authService.getUser().subscribe(resp=>{\n    alert(\"refreshed\");\n      this.shareUser.setUser(resp.body);\n  }\n    ,error=>alert(error));\n  }\n  \n}\n","<div class=\"container\">\n  <div class=\"container-fluid\">\n    \n    <div class=\"row row-cols-1 row-cols-md-2\">\n      <div class=\"col mb-4\">\n        <div class=\"card text-white bg-dark mb-3\">\n          \n          <a routerLink=\"/profile/image\"><img src=\"{{user.profile.image}}\" class=\"card-img-top\" alt=\"My Profile\"></a>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{{user.first_name+\" \"+user.last_name|titlecase}}</h5>\n            <p class=\"card-text\">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n            <p class=\"card-text\">{{user.profile.bio| titlecase}}</p>\n            <p class=\"card-text\"><button class=\"btn btn-primary\" (click)=\"refreshProfile()\">Refresh Profile</button>\n            </p>\n            <p class=\"card-text\"><button class=\"btn btn-primary\" (click)=\"updateProfile()\">Update Profile</button></p>\n            \n            \n          </div>\n        \n        </div>\n\n      </div>\n\n      <div class=\"col mb-4\">\n\n        <table class=\"table table-hover table-dark \">\n          <thead>\n            <tr>\n              <th scope=\"col\">User Details:</th>\n            \n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th scope=\"row\">Username</th>\n              <td>{{user.username}}</td>\n              \n            </tr>\n            \n            <tr>\n              <th scope=\"row\">Email</th>\n              <td>{{user.email}}</td>\n              \n            </tr>\n            <tr>\n              <th scope=\"row\">Contact No</th>\n              <td>{{user.profile.contact_no}}</td>\n              \n            </tr>\n            <tr>\n              <th scope=\"row\">Address</th>\n              <td>{{user.profile.address}}</td>\n              \n            </tr>\n           \n            <tr>\n              <th scope=\"row\">Auctioneer</th>\n              <td>{{user.profile.is_auctioneer}}</td>\n              \n            </tr>\n            <tr>\n              <th scope=\"row\">Bidder</th>\n              <td>{{user.profile.is_bidder}}</td>\n              \n            </tr>\n      \n            <tr>\n              <th scope=\"row\">Pincode</th>\n              <td>{{user.profile.pincode}}</td>\n              \n            </tr>\n           \n          </tbody>\n        </table>\n        <ng-container *ngIf=\"!user.profile.is_bidder\">\n          <button class=\"btn btn-primary\" (click)=\"user_request(user.first_name,'bid')\">Register as Bidder</button>\n        </ng-container>\n      \n    \n        <ng-container *ngIf=\"!user.profile.is_auctioneer\">\n          <button class=\"btn btn-primary\" (click)=\"user_request(user.username,'auction')\">Register as Auctioneer</button>\n        </ng-container>\n      </div>\n     </div>\n\n\n    <!--User update form if he clicks on 'update profile' button-->\n    <ng-container *ngIf=\"show_update_form\">\n      <!--Pprofile update component-->\n      <app-profile-update [user]=\"user\"></app-profile-update>\n    </ng-container>\n   \n\n  \n\n</div>\n</div>\n\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n//activate admin route for only admin\nexport class AdminGuardService implements CanActivate{\nprivate loginStatus:boolean=false;\nprivate is_staff:boolean=false;\n\nconstructor(public authService:AuthService,private router:Router,private route:ActivatedRoute) { }\n\ncanActivate():boolean{\n//receiving values from behavior subject 'LoggedInUser'\n  this.authService.getLoggedInUser().subscribe(value=>{this.loginStatus=value[\"loginStatus\"];\nthis.is_staff=value[\"is_staff\"]  ;\n});\n\n  if(!this.loginStatus || !this.is_staff){\n    this.router.navigate(['/login'],{relativeTo:this.route})\n  return false;\n}\nelse{\n  return true;\n\n}\n}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { LoggedInUser } from '@app/classes/logged-in-user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService implements CanActivate {\nprivate loginStatus:boolean=false;\n  constructor(public auth: AuthService, public router: Router) {\n   }\n //for profile\n  canActivate(): boolean {\n    this.auth.getLoggedInUser().subscribe(resp=>{\n      this.loginStatus=resp[\"loginStatus\"];});\n    if (!this.loginStatus){\n      this.router.navigate(['login']);\n      return false;\n    }\n    return true;\n  }\n}","import { Injectable } from '@angular/core';\r\nimport {HttpRequest,HttpHandler,HttpEvent,HttpInterceptor} from '@angular/common/http';\r\nimport { AuthService } from '@app/services/auth.service';\r\nimport { Observable } from 'rxjs';\r\n@Injectable()\r\n//to send Json web token with each request in headers...if present.\r\n//Note:null value is not send\r\nexport class AuthTokenInterceptor implements HttpInterceptor {\r\n  constructor(public authService: AuthService) {}\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const token=sessionStorage.getItem(\"token\")\r\n    if(token!=undefined||token!=null){\r\n    request = request.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${sessionStorage.getItem(\"token\")}`\r\n      }\r\n    });}\r\n    return next.handle(request);\r\n  }\r\n}","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders, HttpErrorResponse,HttpResponse} from '@angular/common/http';\r\nimport {Observable, throwError, BehaviorSubject, Subject} from 'rxjs';\r\nimport {User} from '@app/classes/user';\r\nimport {LoggedInUser} from '@app/classes/logged-in-user';\r\n//angular-json web token library\r\nimport {JwtHelperService } from '@auth0/angular-jwt';\r\n//to read jwt-token payload\r\nimport decode from 'jwt-decode';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { RestApiServerService } from './rest-api-server.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n \r\n  private url:string;\r\n  //behavior subject containing loginStatus, (expiration,is_staff and user_id)-->from token\r\n private subject=new BehaviorSubject<LoggedInUser>(new LoggedInUser());\r\n  public errors: any;\r\n \r\n  constructor(private http: HttpClient,private jwtHelper:JwtHelperService,private restapi:RestApiServerService) {\r\n    this.url=restapi.path;\r\n  }\r\n\r\n  //returning logged in user\r\n public getLoggedInUser():Observable<LoggedInUser>{\r\n    if(!this.isAuthenticated()){\r\n      sessionStorage.clear();\r\n      this.setLoggedInUser(new LoggedInUser());\r\n  }\r\n   return this.subject.asObservable();\r\n  \r\n}\r\n \r\n//function for setting above behavior subject\r\nprivate setLoggedInUser(object:LoggedInUser){\r\n  if(object!=null){\r\n  this.subject.next(object);\r\n\r\n  }\r\n\r\n\r\n  \r\n}\r\n//check token expiry\r\n  private isAuthenticated():boolean {\r\n  const token=sessionStorage.getItem('token');\r\n  if(token==null || token==undefined){\r\n  return false;}\r\n  return !this.jwtHelper.isTokenExpired(token);\r\n  }\r\n\r\n   \r\n   private handleError(error: HttpErrorResponse) {\r\n     console.log(\"handling error.......\")\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n      return throwError('client side Error: '+error.error.message);\r\n    } else {\r\n      console.error(\r\n        `Backend returned code: ${error.status}, ` +\r\n        `body was:${error.error.detail},`+//invalid credintials return {'global':......}\r\n        \r\n        `message was: ${error.message}` );\r\n      if(error.status==400)\r\n        return throwError(\"invalid crediantails....try again!!!\");\r\n        \r\n          if(error.status==0)\r\n          return throwError(\"server error....contact admin!!!\");\r\n          if(error.status==401)\r\n        return throwError(error.error.detail);\r\n        if(error.status==404)\r\n        return throwError(\"detail not found\");\r\n}};\r\n \r\n  public login(LoginUser):Observable<HttpResponse<any>>{\r\n    if(LoginUser!=null){\r\n    return this.http.post(this.url+'auth/login/', JSON.stringify(LoginUser),{headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\r\n  \r\n  catchError(this.handleError)\r\n    );}\r\n      \r\n  }\r\n\r\n \r\n  public logout() {\r\n    //clearing session storage and setting default values in behavior subject\r\n    sessionStorage.clear();\r\n    this.setLoggedInUser(new LoggedInUser());\r\n    \r\n}\r\n \r\n   public updateData() {\r\n    this.errors = [];\r\n    //don't use local storage as it is not secure\r\n    // decode the token to read the user_id,is_staff and expiration timestamp\r\n    const tokenPayload=decode(sessionStorage.getItem(\"token\"));\r\n    const is_staff:boolean=tokenPayload[\"is_staff\"];\r\n    const expiration=new Date(tokenPayload[\"exp\"]*1000);\r\n    const user_id=tokenPayload[\"user_id\"];\r\n    this.setLoggedInUser({\"user_id\":user_id,\"is_staff\":is_staff,\"expiration\":expiration,\"loginStatus\":true})\r\n  }\r\n\r\n  getUser():Observable<HttpResponse<User>>{\r\n  return this.http.get<User>(this.url+'user/',\r\n  {headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\r\n    catchError(this.handleError)\r\n  )\r\n  }\r\n \r\n\r\n\r\n\r\n  \r\n}","import { Injectable } from '@angular/core';\nimport { HttpResponse, HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { Bid } from '@app/classes/bid';\nimport { catchError } from 'rxjs/operators';\nimport { RetrieveBid } from '@app/classes/retrieve-bid';\nimport { RestApiServerService } from './rest-api-server.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BidService {\n  private url:string;\n\n  constructor(private http:HttpClient,private restapi:RestApiServerService) {\n    this.url=restapi.path+'api/events/';\n   }\n\n  retrieveHighestBid(event_id:number):Observable<HttpResponse<RetrieveBid>>{\n  \n    return this.http.get<RetrieveBid>(this.url+event_id+'/highest_bid/',\n    {headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(catchError(this.handleError))\n  }\n\n  place_bid(bid:Bid,event_id:number):Observable<HttpResponse<any>>{\n    if(bid!=null && event_id!=null){\n    return this.http.post<any>(this.url+event_id+'/bids/create/',JSON.stringify(bid),\n    {headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\n      catchError(this.handleError)\n    );\n    }\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    console.log(\"handling error.......\")\n   if (error.error instanceof ErrorEvent) {\n     // A client-side or network error occurred. Handle it accordingly.\n     console.error('An error occurred:', error.error.message);\n     return throwError('client side Error: '+error.error.message);\n   } else {\n     console.error(\n       `Backend returned code: ${error.status}, ` +\n       `body was:${error.error.detail},`+\n       \n       `message was: ${error.message}` );\n         if(error.status==0)\n         return throwError(\"server error....contact admin!!!\");\n       else\n       return throwError(error.error.detail);\n}};\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { ShareUserService } from './share-user.service';\nimport { User } from '@app/classes/user';\n\n@Injectable({\n  providedIn: 'root'\n})\n//read 'is_auctioneer' property from behavior subject 'user' \nexport class CanAuctionGuardService implements CanActivate{\nprivate loginStatus:boolean;\nprivate can_auction:boolean;\n  //double protection\n  constructor(private router:Router,private authService:AuthService,private shareUser:ShareUserService) { }\n\n  canActivate():boolean{\nthis.authService.getLoggedInUser().subscribe(resp=>this.loginStatus=resp[\"loginStatus\"]);\nthis.shareUser.getUser().subscribe(resp=>this.can_auction=resp.profile[\"is_auctioneer\"]);\n\nconsole.log(this.can_auction);\nif(this.loginStatus && this.can_auction){\n  return true;\n}\nelse { \n  if(this.loginStatus){\n    //to inform user to refresh profile for storing latest changes in behavior subject 'user'\n  alert(\"you are not an auctioneer...refresh your profile and try again\");\n  return false;\n}\nelse{\nalert(\"login first\");\nreturn false;\n}\n}\n}\n\n}\n\n\n","import { Injectable } from '@angular/core';\nimport {HttpClient,HttpErrorResponse,HttpHeaders,HttpResponse} from '@angular/common/http';\nimport { Observable, throwError,BehaviorSubject } from 'rxjs';\nimport { catchError, retry,map } from 'rxjs/operators';\nimport { BidEventListAPI } from '@app/classes/bid-event-list-api';\nimport { BidEvent } from '@app/classes/bid-event';\nimport { RestApiServerService } from './rest-api-server.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n\n  \n  private url:string;\n\n  constructor(private http:HttpClient,private restapi:RestApiServerService) {\n    this.url=restapi.path+'api/events/';\n    \n   }\n//handle error\n   private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n      return throwError('client side Error: '+error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error.detail}, `+\n        `message was: ${error.message}` );\n    \n    // return an observable with a user-facing error message\n    if(error.status==0){\n return throwError('server error....contact admin!!!')\n    }\n    if(error.status!=0){\n    return throwError(\n      error.error.detail);}\n}};\n\n\n  getEventList():Observable<HttpResponse<BidEventListAPI>>{\n    return this.http.get<BidEventListAPI>(this.url,\n    {headers: new HttpHeaders({'Content-Type': 'application/json'}),\n    observe:'response'}).pipe(\n     catchError(this.handleError));\n  }\n\n  addEventByAuctioneer(event:BidEvent):Observable<HttpResponse<any>>{\n\n    if(event!=null){\n      return this.http.post(this.url+\"create/\",JSON.stringify(event),\n      {headers: new HttpHeaders({'Content-Type': 'application/json'}),\n      observe:'response'}).pipe(\n        catchError(this.handleError) );\n    }\n  }\n\n  deleteEventByAdmin(event_id:number){\n    if(event_id!=null){\n      return this.http.delete(this.url+event_id+'/destroy/',\n      {headers: new HttpHeaders({'Content-Type': 'application/json'}),\n      observe:'response'}).pipe(catchError(this.handleError))\n    }\n\n  }\n\n  \n\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient,HttpHeaders,HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport { User } from '@app/classes/user';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry,map } from 'rxjs/operators';\nimport { RestApiServerService } from './rest-api-server.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterService {\n  \n//url string\n  private url:string;\n\n  constructor(private http:HttpClient,private restapi:RestApiServerService) {\n    this.url=restapi.path+'user/create/';\n   }\n//handle error\n   private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n      return throwError('client side Error: '+error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error.detail}, `+\n        `message was: ${error.message}` );\n    \n    // return an observable with a user-facing error message\n    if(error.status==400)\n    return throwError(error.error.detail);\n    else\n    throwError(\"server error....contact admin!!!\")\n}};\n\n\n  registerUser(user:User):Observable<HttpResponse<User>>{\n    \n    return this.http.post<User>(this.url,JSON.stringify(user),\n    {headers: new HttpHeaders({'Content-Type': 'application/json'}),\n    observe:'response'}).pipe(\n     catchError(this.handleError));\n  }\n  \n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RestApiServerService {\n\npublic path=\"https://bid-app-project.herokuapp.com/\";\n\n  constructor() { }\n}\n","import { Injectable } from '@angular/core';\nimport { BidEvent } from '@app/classes/bid-event';\nimport { ShareEventNode } from '@app/classes/share-event-node';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShareEventService {\n\n  //behavior subject storing events array\nprivate shareEventNode=new BehaviorSubject<ShareEventNode>(new ShareEventNode());\n  \n\n  constructor() { \n  }\n\n  //function for setting ...\n  setShareEventNode(shareEventNode:ShareEventNode){\n    if(shareEventNode!=null){\n    this.shareEventNode.next(shareEventNode);\n    }\n  }\n  //function for receiving event array\n  getShareEventNode(){\n    return this.shareEventNode.asObservable();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { AuthService } from '@app/services/auth.service';\nimport {User} from '@app/classes/user';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Profile } from '@app/classes/profile';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShareUserService {\n  //behavior subject for storing complete user profile\nprivate shareUser=new BehaviorSubject<User>(new User(new Profile()));\n\n  constructor() {\n    \n   }\n\n\ngetUser():Observable<User>{\nreturn this.shareUser.asObservable();\n}\n\nsetUser(user:User){\n  this.shareUser.next(user);\n}\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponse, HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { User } from '@app/classes/user';\nimport { catchError } from 'rxjs/operators';\nimport { RestApiServerService } from './rest-api-server.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private url:string;\n  constructor(private http:HttpClient,private restapi:RestApiServerService) { \n    this.url=restapi.path+'user/';\n  }\n\n\n//update user by admin\nupdateUserByAdmin(user:User):Observable<HttpResponse<User>>{\n  if(user!=null){\n  return this.http.put<User>(this.url+user.username+'/',JSON.stringify(user),{headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\n  catchError(this.handleError)\n)}\n}\n//update profile by user\n\n  updateProfileByUser(user:User):Observable<HttpResponse<any>>{\n    if(user!=null){\n    return this.http.put<any>(this.url,JSON.stringify(user),\n    {headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\n      catchError(this.handleError)\n    );\n    }\n  }\n\n\n  //on successfull deletion ,generic views return 204 with no response body\n  deleteUserByAdmin(username:string):Observable<HttpResponse<any>>{\n    if(username!=null){\n      return this.http.delete<User>(this.url+username+'/',{headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\n          catchError(this.handleError)\n        )\n    }\n    \n        }\n\n\n  //for admin only\n  getUserByUsername(username:string):Observable<HttpResponse<User>>{\n    if(username!=null){\n    return this.http.get<User>(this.url+username+'/',{headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\n      catchError(this.handleError)\n    )}\n    }\n\n    updateProfileImage(formData:FormData,filename:string):Observable<HttpResponse<any>>{\n    return this.http.patch<any>(this.url+'profile/'+filename+'/',formData).pipe(\n      catchError(this.handleError)\n    )\n    }\n\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n      return throwError('client side Error: '+error.error.message);\n    } else {\n      console.error(\n        `Backend returned code: ${error.status}, ` +\n        `body was:${error.error.detail},`+\n        \n        `message was: ${error.message}` );\n        if(error.status==0)\n        return throwError(\"server error....contact admin!!!\");\n        else{\n          console.log(\"hello\")\n        return throwError(error.error.detail);}\n        \n\n}};\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}